require("dotenv").config();
const jwt = require("jsonwebtoken");
const nguoidung = require("../models/nguoidung");
const fs = require("fs");
const path = require("path");

const SECRET_KEY = process.env.JWT_SECRET || "default_secret";
const EXPIRES = process.env.JWT_EXPIRES || "7d";
const authenticateToken = (req, res, next) => {
  const authHeader = req.header("Authorization");
  if (!authHeader) {
    return res.status(401).json({ message: "Kh√¥ng c√≥ token, t·ª´ ch·ªëi truy c·∫≠p" });
  }

  const token = authHeader.split(" ")[1];
  if (!token) {
    return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
  }

  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    req.user = decoded;
    next();
  } catch (error) {
    return res
      .status(403)
      .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
};

const authorizeRole = (...allowedRoles) => {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.Role)) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
    }
    next();
  };
};

// Async handler
const asyncHandler =
  (fn) =>
  (req, res, next) =>
    Promise.resolve(fn(req, res, next)).catch(next);

// 1Ô∏è‚É£ LOGIN (C√ì TOKEN)
exports.login = asyncHandler(async (req, res) => {
  const { email, mat_khau } = req.body;
  console.log(`üîë Login attempt for email: ${email}`);

  if (!email || !mat_khau) {
    return res.status(400).json({
      success: false,
      message: "Vui l√≤ng cung c·∫•p email v√† m·∫≠t kh·∫©u.",
    });
  }

  const user = await nguoidung.getByEmail(email.trim());
  if (!user) {
    return res.status(404).json({
      success: false,
      message: "Email kh√¥ng t·ªìn t·∫°i.",
    });
  }

  const isMatch = mat_khau.trim() === user.mat_khau.trim();
  if (!isMatch) {
    return res.status(401).json({
      success: false,
      message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.",
    });
  }

  const { mat_khau: _, ...userWithoutPassword } = user;

  // üîë Sinh token
  const token = jwt.sign(
    { id: user.ID_NguoiDung, email: user.email, Role: user.Role || "user" },
    SECRET_KEY,
    { expiresIn: EXPIRES }
  );

  res.status(200).json({
    success: true,
    message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
    token,
    user: userWithoutPassword,
  });
});
exports.insert = asyncHandler(async (req, res) => {
  const newData = { ...req.body };

  if (!newData.email || !newData.mat_khau || !newData.ho_ten) {
    return res.status(400).json({
      success: false,
      message: "Email, m·∫≠t kh·∫©u v√† h·ªç t√™n l√† b·∫Øt bu·ªôc.",
    });
  }

  if (!newData.email.includes("@")) {
    return res.status(400).json({
      success: false,
      message: "Email kh√¥ng h·ª£p l·ªá.",
    });
  }

  const existingUser = await nguoidung.getByEmail(newData.email);
  if (existingUser) {
    return res.status(409).json({
      success: false,
      message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.",
    });
  }

  const result = await nguoidung.insert(newData);
  res.status(201).json({
    success: true,
    id: result.insertId,
    message: "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng.",
  });
});

// UPDATE USER (KH√îNG C·∫¶N TOKEN, CH·ªà C·∫¶N ID)
exports.update = asyncHandler(async (req, res) => {
    const updatedData = { ...req.body };
    const userId = req.params.id;

    const currentUser = await nguoidung.getById(userId);
    if (!currentUser) {
        return res.status(404).json({
            success: false,
            message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
        });
    }

    if (updatedData.mat_khau_cu && updatedData.mat_khau) {
        const isOldPasswordValid = updatedData.mat_khau_cu.trim() === currentUser.mat_khau.trim();
        if (!isOldPasswordValid) {
            return res.status(401).json({
                success: false,
                message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.",
            });
        }
        delete updatedData.mat_khau_cu;
    } else {
        delete updatedData.mat_khau;
        delete updatedData.mat_khau_cu;
    }

    const affectedRows = await nguoidung.update(userId, updatedData);
    if (affectedRows === 0) {
        return res.status(404).json({
            success: false,
            message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ g√¨ thay ƒë·ªïi.",
        });
    }

    res.status(200).json({
        success: true,
        message: "C·∫≠p nh·∫≠t th√†nh c√¥ng.",
        affectedRows,
    });
});

// GET ALL USERS (Kh√¥ng thay ƒë·ªïi)
exports.getAll = asyncHandler(async (req, res) => {
  const data = await nguoidung.getAll();

  const users = data.map(user => {
    const { mat_khau, ...userWithoutPassword } = user;
    return userWithoutPassword;
  });

  res.status(200).json({
    success: true,
    count: users.length,
    data: users,
  });
});

// GET USER BY ID (KH√îNG C·∫¶N TOKEN)
exports.getById = asyncHandler(async (req, res) => {
    const userId = req.params.id;

    const user = await nguoidung.getById(userId);
    if (!user) {
        return res.status(404).json({
            success: false,
        });
    }

    const { mat_khau, ...userWithoutPassword } = user;
    res.status(200).json({
        success: true,
        user: userWithoutPassword,
    });
});

exports.delete = asyncHandler(async (req, res) => {
    const userId = req.params.id;
    const { mat_khau } = req.body;

    if (!mat_khau || mat_khau.trim() === '') {
        return res.status(400).json({
            success: false,
            message: 'Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u ƒë·ªÉ x√°c nh·∫≠n x√≥a.',
        });
    }

    const user = await nguoidung.getById(userId);
    if (!user) {
        return res.status(404).json({
            success: false,
            message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.',
        });
    }

    const isPasswordValid = mat_khau.trim() === user.mat_khau.trim();
    if (!isPasswordValid) {
        return res.status(401).json({
            success: false,
            message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng ch√≠nh x√°c.',
        });
    }

    if (user.anh_dai_dien && user.anh_dai_dien !== 'https://i.pravatar.cc/150') {
        try {
            const uploadsDir = path.join(__dirname, '../uploads');
            const imageFilename = path.basename(user.anh_dai_dien);
            const imagePath = path.join(uploadsDir, imageFilename);
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }
        } catch (fileError) {
            // B·ªè qua l·ªói
        }
    }

    const affectedRows = await nguoidung.delete(userId);
    if (affectedRows === 0) {
        return res.status(404).json({
            success: false,
            message: 'Kh√¥ng th·ªÉ x√≥a. Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.',
        });
    }

    res.status(200).json({
        success: true,
        message: 'X√≥a t√†i kho·∫£n th√†nh c√¥ng!',
    });
});

// VERIFY PASSWORD (KH√îNG C·∫¶N TOKEN)
exports.verifyPassword = asyncHandler(async (req, res) => {
    const { mat_khau } = req.body;
    const userId = req.params.id;

    if (!mat_khau) {
        return res.status(400).json({
            success: false,
            valid: false,
            message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc.',
        });
    }

    const user = await nguoidung.getById(userId);
    if (!user) {
        return res.status(404).json({
            success: false,
            valid: false,
            message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.',
        });
    }

    const isValid = mat_khau.trim() === user.mat_khau.trim();
    res.status(200).json({
        success: true,
        valid: isValid,
        message: isValid ? 'M·∫≠t kh·∫©u ch√≠nh x√°c' : 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c',
    });
});

// SEARCH USERS (Kh√¥ng thay ƒë·ªïi)
exports.timKiem = asyncHandler(async (req, res) => {
    const { tuKhoa, idNguoiDungHienTai } = req.query;
    if (!tuKhoa) {
        return res.status(400).json({ success: false, message: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm." });
    }
    if (!idNguoiDungHienTai) {
        return res.status(400).json({ success: false, message: "Thi·∫øu ID ng∆∞·ªùi d√πng hi·ªán t·∫°i." });
    }
    const users = await nguoidung.timKiem(tuKhoa, idNguoiDungHienTai);
    res.status(200).json({ success: true, count: users.length, data: users });
});

// ‚úÖ EXPORT T·∫§T C·∫¢ METHODS
module.exports = {
    login: exports.login,
    insert: exports.insert,
    update: exports.update,
    getAll: exports.getAll,
    getById: exports.getById,
    delete: exports.delete,
    verifyPassword: exports.verifyPassword,
    timKiem: exports.timKiem
};