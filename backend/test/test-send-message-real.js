const http = require('http');

// Test g·ª≠i tin nh·∫Øn v√† xem c√≥ t·∫°o th√¥ng b√°o kh√¥ng
async function testSendMessage() {
  console.log('üíå Test g·ª≠i tin nh·∫Øn...\n');
  
  const messageData = {
    ID_NguoiGui: '1d22a4c4-ab8d-4d83-a997-f67671755820', // Nhi (A)
    ID_NguoiNhan: '3bcb7f72-7e56-4a5c-a381-9725e8ff052d', // B
    noi_dung: 'Test message - ki·ªÉm tra th√¥ng b√°o'
  };
  
  console.log('üì§ G·ª≠i tin nh·∫Øn:');
  console.log('   T·ª´:', messageData.ID_NguoiGui);
  console.log('   ƒê·∫øn:', messageData.ID_NguoiNhan);
  console.log('   N·ªôi dung:', messageData.noi_dung);
  console.log('');
  
  const data = JSON.stringify(messageData);
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/tinnhan/send',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };
  
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        console.log('üì• Response Status:', res.statusCode);
        try {
          const parsed = JSON.parse(responseData);
          console.log('üì¶ Response:', JSON.stringify(parsed, null, 2));
          
          if (parsed.success) {
            console.log('\n‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i!');
            console.log('\n‚è∞ CH·ªú 2 GI√ÇY r·ªìi ki·ªÉm tra th√¥ng b√°o...');
            
            // ƒê·ª£i 2s ƒë·ªÉ backend t·∫°o th√¥ng b√°o
            setTimeout(() => {
              checkNotifications(messageData.ID_NguoiNhan).then(resolve).catch(reject);
            }, 2000);
          } else {
            console.log('\n‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i!');
            resolve();
          }
        } catch (e) {
          console.log('Raw response:', responseData);
          resolve();
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('‚ùå Error:', error.message);
      reject(error);
    });
    
    req.write(data);
    req.end();
  });
}

async function checkNotifications(userId) {
  console.log(`\nüîî Ki·ªÉm tra th√¥ng b√°o cho user: ${userId}`);
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: `/api/thongbao/user/${userId}`,
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    }
  };
  
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          
          if (parsed.success && parsed.data && parsed.data.length > 0) {
            console.log(`\n‚úÖ C√ì ${parsed.data.length} TH√îNG B√ÅO!`);
            console.log('\nüìã Chi ti·∫øt:');
            parsed.data.forEach((notif, index) => {
              console.log(`\n${index + 1}. ${notif.noi_dung}`);
              console.log(`   Lo·∫°i: ${notif.loai}`);
              console.log(`   ƒê√£ ƒë·ªçc: ${notif.da_doc ? 'R·ªìi' : 'Ch∆∞a'}`);
              console.log(`   Th·ªùi gian: ${notif.thoi_gian_tao}`);
            });
          } else {
            console.log('\n‚ùå KH√îNG C√ì TH√îNG B√ÅO N√ÄO!');
            console.log('\nüîç Nguy√™n nh√¢n c√≥ th·ªÉ:');
            console.log('   1. Backend kh√¥ng t·∫°o th√¥ng b√°o khi g·ª≠i tin nh·∫Øn');
            console.log('   2. Backend c√≥ l·ªói nh∆∞ng kh√¥ng log ra');
            console.log('   3. req.io undefined trong controller');
            console.log('\nüí° Gi·∫£i ph√°p: Xem backend logs khi g·ª≠i tin nh·∫Øn');
          }
          
          resolve();
        } catch (e) {
          console.log('Response:', responseData);
          resolve();
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('‚ùå Error:', error.message);
      reject(error);
    });
    
    req.end();
  });
}

testSendMessage()
  .then(() => {
    console.log('\n‚úÖ Test ho√†n t·∫•t!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Test th·∫•t b·∫°i:', error);
    process.exit(1);
  });



